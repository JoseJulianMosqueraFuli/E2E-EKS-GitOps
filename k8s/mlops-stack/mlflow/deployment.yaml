apiVersion: v1
kind: Namespace
metadata:
  name: mlflow
  labels:
    name: mlflow
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: experiment-tracking

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-config
  namespace: mlflow
data:
  MLFLOW_S3_ENDPOINT_URL: ""
  MLFLOW_TRACKING_URI: "postgresql://mlflow:password@postgres:5432/mlflow"
  AWS_DEFAULT_REGION: "us-west-2"

---
apiVersion: v1
kind: Secret
metadata:
  name: mlflow-secrets
  namespace: mlflow
type: Opaque
stringData:
  postgres-password: "your-secure-password"
  aws-access-key-id: ""
  aws-secret-access-key: ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlflow
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: mlflow
        - name: POSTGRES_USER
          value: mlflow
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mlflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mlflow
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mlflow-server
  template:
    metadata:
      labels:
        app: mlflow-server
    spec:
      serviceAccountName: mlflow-sa
      containers:
      - name: mlflow-server
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          pip install mlflow[extras]==2.5.0 psycopg2-binary boto3
          mlflow server \
            --backend-store-uri postgresql://mlflow:${POSTGRES_PASSWORD}@postgres:5432/mlflow \
            --default-artifact-root s3://${S3_BUCKET}/mlflow-artifacts \
            --host 0.0.0.0 \
            --port 5000 \
            --workers 4
        ports:
        - containerPort: 5000
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-password
        - name: S3_BUCKET
          value: "mlops-dev-model-artifacts"  # From Terraform output
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: AWS_DEFAULT_REGION
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
spec:
  selector:
    app: mlflow-server
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-ingress
  namespace: mlflow
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  rules:
  - host: mlflow.mlops.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-server
            port:
              number: 5000

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlflow-sa
  namespace: mlflow
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/mlops-dev-mlflow-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: mlflow
  name: mlflow-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mlflow-rolebinding
  namespace: mlflow
subjects:
- kind: ServiceAccount
  name: mlflow-sa
  namespace: mlflow
roleRef:
  kind: Role
  name: mlflow-role
  apiGroup: rbac.authorization.k8s.io