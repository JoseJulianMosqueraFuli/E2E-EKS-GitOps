apiVersion: v1
kind: Namespace
metadata:
  name: mlflow
  labels:
    name: mlflow
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: experiment-tracking

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-config
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: config
data:
  MLFLOW_S3_ENDPOINT_URL: "https://s3.us-west-2.amazonaws.com"
  MLFLOW_TRACKING_URI: "postgresql://mlflow:password@postgres:5432/mlflow"
  AWS_DEFAULT_REGION: "us-west-2"
  MLFLOW_ARTIFACT_ROOT: "s3://mlops-model-artifacts/mlflow-artifacts"
  MLFLOW_SERVER_HOST: "0.0.0.0"
  MLFLOW_SERVER_PORT: "5000"
  MLFLOW_SERVER_WORKERS: "4"
  MLFLOW_BACKEND_STORE_URI: "postgresql://mlflow:password@postgres:5432/mlflow"

---
apiVersion: v1
kind: Secret
metadata:
  name: mlflow-secrets
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  postgres-password: "mlflow-secure-password-change-me"
  postgres-user: "mlflow"
  postgres-db: "mlflow"
  # AWS credentials - use IRSA in production instead
  aws-access-key-id: ""
  aws-secret-access-key: ""
---
# Additional secret for MLflow authentication
apiVersion: v1
kind: Secret
metadata:
  name: mlflow-auth-secrets
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: auth
type: Opaque
stringData:
  # Basic auth credentials for MLflow UI (optional)
  auth-username: "mlflow-admin"
  auth-password: "change-me-secure-password"
  # JWT secret for token-based auth
  jwt-secret: "change-me-jwt-secret-key"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlflow
  labels:
    app: postgres
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/component: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
            - -d
            - mlflow
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
            - -d
            - mlflow
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: database-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp3

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: database
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mlflow-server
  template:
    metadata:
      labels:
        app: mlflow-server
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: mlflow-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U mlflow; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-password
      containers:
      - name: mlflow-server
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          set -e
          # Install dependencies
          pip install --no-cache-dir \
            mlflow[extras]==2.8.1 \
            psycopg2-binary \
            boto3 \
            cryptography
          
          # Create non-root user
          useradd -m -u 1000 mlflow || true
          
          # Start MLflow server
          exec mlflow server \
            --backend-store-uri "${MLFLOW_BACKEND_STORE_URI}" \
            --default-artifact-root "${MLFLOW_ARTIFACT_ROOT}" \
            --host "${MLFLOW_SERVER_HOST}" \
            --port "${MLFLOW_SERVER_PORT}" \
            --workers "${MLFLOW_SERVER_WORKERS}" \
            --gunicorn-opts "--timeout 120 --keep-alive 2 --max-requests 1000"
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        env:
        - name: MLFLOW_BACKEND_STORE_URI
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: mlflow-secrets
              key: postgres-db
        - name: MLFLOW_ARTIFACT_ROOT
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: MLFLOW_ARTIFACT_ROOT
        - name: MLFLOW_SERVER_HOST
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: MLFLOW_SERVER_HOST
        - name: MLFLOW_SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: MLFLOW_SERVER_PORT
        - name: MLFLOW_SERVER_WORKERS
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: MLFLOW_SERVER_WORKERS
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: AWS_DEFAULT_REGION
        - name: MLFLOW_S3_ENDPOINT_URL
          valueFrom:
            configMapKeyRef:
              name: mlflow-config
              key: MLFLOW_S3_ENDPOINT_URL
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false

---
apiVersion: v1
kind: Service
metadata:
  name: mlflow-server
  namespace: mlflow
  labels:
    app: mlflow-server
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: mlflow-server
  ports:
  - name: http
    port: 5000
    targetPort: http
    protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mlflow-ingress
  namespace: mlflow
  annotations:
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  rules:
  - host: mlflow.mlops.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mlflow-server
            port:
              number: 5000

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlflow-sa
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: service-account
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/mlops-mlflow-s3-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: mlflow
  name: mlflow-role
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mlflow-rolebinding
  namespace: mlflow
  labels:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: mlflow-sa
  namespace: mlflow
roleRef:
  kind: Role
  name: mlflow-role
  apiGroup: rbac.authorization.k8s.io