# GitLab CI/CD Pipeline for MLOps
variables:
  TERRAFORM_VERSION: "1.6.0"
  KUBECTL_VERSION: "1.28.0"
  PYTHON_VERSION: "3.11"
  AWS_DEFAULT_REGION: "us-west-2"

stages:
  - validate
  - test
  - build
  - deploy-infra
  - deploy-ml
  - monitor

# Templates
.terraform-base: &terraform-base
  image: hashicorp/terraform:$TERRAFORM_VERSION
  before_script:
    - apk add --no-cache curl git
    - terraform --version

.python-base: &python-base
  image: python:$PYTHON_VERSION-slim
  before_script:
    - pip install --upgrade pip
    - pip install -r ml-platform/requirements.txt

.kubectl-base: &kubectl-base
  image: bitnami/kubectl:$KUBECTL_VERSION
  before_script:
    - kubectl version --client

# Validation Stage
terraform-validate:
  <<: *terraform-base
  stage: validate
  script:
    - cd infra/environments/dev
    - terraform init -backend=false
    - terraform validate
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

security-scan:
  image: bridgecrew/checkov:latest
  stage: validate
  script:
    - checkov -d infra/ --framework terraform --output cli --output junitxml --output-file-path console,checkov-report.xml
  artifacts:
    reports:
      junit: checkov-report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

# Testing Stage
terraform-test:
  image: golang:1.21-alpine
  stage: test
  before_script:
    - apk add --no-cache git
  script:
    - cd infra/modules/vpc/test
    - go mod download
    - go test -v -timeout 30m
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

ml-tests:
  <<: *python-base
  stage: test
  script:
    - cd ml-platform
    - pytest tests/ -v --junitxml=test-results.xml --cov=src --cov-report=xml
  artifacts:
    reports:
      junit: ml-platform/test-results.xml
      coverage: ml-platform/coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Build Stage
build-ml-images:
  image: docker:24.0.5
  stage: build
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/ml-trainer:$CI_COMMIT_SHA ml-platform/docker/trainer/
    - docker build -t $CI_REGISTRY_IMAGE/ml-inference:$CI_COMMIT_SHA ml-platform/docker/inference/
    - docker push $CI_REGISTRY_IMAGE/ml-trainer:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/ml-inference:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Infrastructure Deployment
deploy-infra-dev:
  <<: *terraform-base
  stage: deploy-infra
  script:
    - cd infra/environments/dev
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply tfplan
  artifacts:
    paths:
      - infra/environments/dev/tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  environment:
    name: dev
    url: https://dev.mlops.company.com

deploy-infra-prod:
  <<: *terraform-base
  stage: deploy-infra
  script:
    - cd infra/environments/prod
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply tfplan
  artifacts:
    paths:
      - infra/environments/prod/tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
  environment:
    name: production
    url: https://prod.mlops.company.com

# ML Deployment
deploy-ml-dev:
  <<: *kubectl-base
  stage: deploy-ml
  script:
    - kubectl apply -f k8s/ml-pipelines/dev/
    - kubectl apply -f k8s/model-serving/dev/
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  environment:
    name: dev-ml
    kubernetes:
      namespace: mlops-dev

deploy-ml-prod:
  <<: *kubectl-base
  stage: deploy-ml
  script:
    - kubectl apply -f k8s/ml-pipelines/prod/
    - kubectl apply -f k8s/model-serving/prod/
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
  environment:
    name: prod-ml
    kubernetes:
      namespace: mlops-prod

# Monitoring
model-validation:
  <<: *python-base
  stage: monitor
  script:
    - python scripts/validate-model-deployment.py --env $ENVIRONMENT
    - python scripts/model-drift-detection.py --env $ENVIRONMENT
  parallel:
    matrix:
      - ENVIRONMENT: [dev, prod]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Scheduled Jobs
scheduled-retraining:
  <<: *python-base
  stage: deploy-ml
  script:
    - python scripts/trigger-retraining.py
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  only:
    variables:
      - $SCHEDULED_JOB == "retraining"