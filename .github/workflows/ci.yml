name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2

jobs:
  # Infrastructure validation
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infra/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive infra/
      
    - name: Terraform Init
      run: |
        cd infra/environments/dev
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd infra/environments/dev
        terraform validate

  # Infrastructure Tests
  terraform-test:
    name: Terraform Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infra/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run VPC Tests
      run: |
        cd infra/modules/vpc/test
        go mod download
        go test -v -timeout 30m
        
    - name: Run S3 Tests
      run: |
        cd infra/modules/s3/test
        go mod download
        go test -v -timeout 20m

  # Kubernetes manifest validation
  k8s-validate:
    name: Kubernetes Validate
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'k8s/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Validate Kubernetes manifests
      run: |
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl --dry-run=client apply -f {}

  # ML Platform Tests
  ml-platform-test:
    name: ML Platform Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'ml-platform/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ml-platform
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linting
      run: |
        cd ml-platform
        flake8 src/ tests/ || true
        black --check src/ tests/ || true
        
    - name: Run tests
      run: |
        cd ml-platform
        pytest tests/ -v || true

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # MLOps Stack Validation
  mlops-validate:
    name: MLOps Stack Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'scripts/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate setup script
      run: |
        chmod +x scripts/setup-mlops-stack.sh
        bash -n scripts/setup-mlops-stack.sh