name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  # Deploy infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infra/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform Init
      run: |
        cd infra/environments/prod
        terraform init
        
    - name: Terraform Plan
      run: |
        cd infra/environments/prod
        terraform plan -out=tfplan
        
    - name: Terraform Apply
      run: |
        cd infra/environments/prod
        terraform apply -auto-approve tfplan

  # Build and push container images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    
    strategy:
      matrix:
        app: [trainer, inference]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mlops-${{ matrix.app }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd apps/${{ matrix.app }}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Deploy Kubernetes applications
  deploy-k8s:
    name: Deploy Kubernetes Apps
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name mlops-cluster
        
    - name: Deploy base applications
      run: |
        kubectl apply -k k8s/base/
        
    - name: Deploy production overlay
      run: |
        kubectl apply -k k8s/overlays/prod/
        
    - name: Wait for deployments
      run: |
        kubectl rollout status deployment/mlflow-server -n mlops
        kubectl rollout status deployment/argo-workflows-server -n argo

  # Deploy workflows
  deploy-workflows:
    name: Deploy Workflows
    runs-on: ubuntu-latest
    needs: deploy-k8s
    if: always() && needs.deploy-k8s.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name mlops-cluster
        
    - name: Deploy workflow templates
      run: |
        kubectl apply -f workflows/templates/ -n argo